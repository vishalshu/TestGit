<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2013-09-10 07:53"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Object Oriented Era Begins</title>
<link>http://ooerabegins.wordpress.com</link>
<description>Just another WordPress.com weblog</description>
<pubDate>Tue, 10 Sep 2013 07:53:16 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://ooerabegins.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>vishalshukla304</wp:author_login>
  <wp:author_email>vishal1shukla2@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[vishalshukla304]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<wp:category>
  <wp:term_id>7168</wp:term_id>
  <wp:category_nicename>gui</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[GUI]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>21004293</wp:term_id>
  <wp:category_nicename>objectville</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Objectville]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>1918796</wp:term_id>
  <wp:tag_slug>decorator-pattern</wp:tag_slug>
  <wp:tag_name><![CDATA[Decorator Pattern]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>148</wp:term_id>
  <wp:tag_slug>design</wp:tag_slug>
  <wp:tag_name><![CDATA[Design]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>36769</wp:term_id>
  <wp:tag_slug>design-pattern</wp:tag_slug>
  <wp:tag_name><![CDATA[Design Pattern]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>844022</wp:term_id>
  <wp:tag_slug>desktop-application</wp:tag_slug>
  <wp:tag_name><![CDATA[Desktop Application]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7168</wp:term_id>
  <wp:tag_slug>gui</wp:tag_slug>
  <wp:tag_name><![CDATA[GUI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20965749</wp:term_id>
  <wp:tag_slug>gui-pattern</wp:tag_slug>
  <wp:tag_name><![CDATA[GUI Pattern]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>173823</wp:term_id>
  <wp:tag_slug>gwt</wp:tag_slug>
  <wp:tag_name><![CDATA[GWT]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20965751</wp:term_id>
  <wp:tag_slug>gwt-design-pattern</wp:tag_slug>
  <wp:tag_name><![CDATA[GWT Design Pattern]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20965750</wp:term_id>
  <wp:tag_slug>gwt-pattern</wp:tag_slug>
  <wp:tag_name><![CDATA[GWT Pattern]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20965689</wp:term_id>
  <wp:tag_slug>hierarchical-model-view-controller</wp:tag_slug>
  <wp:tag_name><![CDATA[Hierarchical Model View Controller]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20965682</wp:term_id>
  <wp:tag_slug>hmvc</wp:tag_slug>
  <wp:tag_name><![CDATA[HMVC]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21004293</wp:term_id>
  <wp:tag_slug>objectville</wp:tag_slug>
  <wp:tag_name><![CDATA[Objectville]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40208</wp:term_id>
  <wp:tag_slug>pattern</wp:tag_slug>
  <wp:tag_name><![CDATA[Pattern]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8688</wp:term_id>
  <wp:tag_slug>swing</wp:tag_slug>
  <wp:tag_name><![CDATA[Swing]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>Object Oriented Era BeginsObject Oriented Era Begins</title>
		<link>http://ooerabegins.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>http://ooerabegins.wordpress.com/about/</link>
  <pubDate>Tue, 26 May 2009 02:40:14 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false"/>
  <description/>
  <content:encoded><![CDATA[<strong>Introduction:</strong>

My name is Vishal Shukla. I was born on the 30 April, 1987 in the Jamnagar, Gujarat.  I pursued Bachelor Of Engineering in Information Technology, in June 2008. I am working with Digicorp Information Systems Pvt. Ltd. since December, 2008 as Java Developer.

Its my hobby to tell others about my hobby :) . I love singing, playing musical instruments. Basically I am a Key board player.  I like to play Guitar, Flute also. In sports, I play cricket and table tennis.

Object Oriented  Programming had always been my favorite subject and so eventually I  biased towards Java. Java, OOPs and Design Patterns are my core competency. I have cleared SCJP certification with 93%.  I have accomplished projects like Chess and Intranet Messenger  as semester projects. I have worked with technologies like Struts 2.0, Hibernate 3.0, GWT. It is my passion to design classes in object oriented way and keeping the code as much manageable as possible.

<strong>Why I Am Here:</strong>

As far as I have seen, software professionals (usually in java) generally love object oriented concepts and design patterns, however, there are really very rear who does truly understand what object orientation is, what patterns are meant for, what it demands in really implementing it and how easy your life becomes if we really use these. Most of the my post will be towards implementing patterns in practice and how we can think in object oriented way.

<strong>Feedbacks And Queries Are Welcome:</strong>
Mail me at vishal1shukla2@gmail.com.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2009-05-26 02:40:14</wp:post_date>
  <wp:post_date_gmt>2009-05-26 02:40:14</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
    <wp:meta_value><![CDATA[2009-05-26 02:40:14]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>HMVC Pattern For GUI Of Swing/GWT/Desktop Application</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/</link>
  <pubDate>Fri, 29 May 2009 03:21:03 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.wordpress.com/?p=6</guid>
  <description/>
  <content:encoded><![CDATA[<strong>Why Pattern?</strong>

When developing client tier of application using html,  there are certain limitations in using patterns because code is going to be in xml so while developing Swing/GWT/Desktop application's GUI, we have support of Inheritance, Polymorphism and other constructs of language, so in this world, we can play around with patterns, so if we use patterns properly, reusability can make our life easier and it may get worst if not used properly.

<strong>HMVC(Hierarhcical Model View Controller) Introduced:</strong>

HMVC can be seen as extended version of MVC pattern. We can divide our GUI into different GUI objects some of which will be for navigation purpose (Menubar), some for displaying/editing data(Grid/Tree/Forms) and others may be use for just layouting purpose. So we clearly identify three major aspect of GUI objects.
<ol>
	<li>Layouting - It is taken care by <em>View</em> in HMVC.</li>
	<li>Handling user interactions - Its <em>Controller</em>'s responsibility.</li>
	<li>Server Interactions And Hold Data Being Displayed - <em>Model </em>handles this.</li>
</ol>
In HMVC, we assign dedicated <em>Controller</em> and <em>Model</em> for each of these objects. It is not necessary to provide each of the GUI object its own controller and model. To keep it simple, we can give dedicated controllers and models only to all the Pages, Grid, Dynamic Tree and other major navigation areas e.g. ContentPanel.

<strong>Getting In Depth Of <span style="text-decoration:underline;">H-M-V-C:</span></strong>In MVC architecture, View can only interact with Controller directly and  Controller can communicate with its associated model. Direct communication between View and Model is not possible. Hence <em>View </em>and <em>Model </em>will have references to Controller only and <em>Controller </em>will have access to associated <em>Model </em>and <em>View</em>. In addition to this, Controller will also have ParentController associated with it, which we will see in detail later. When we create new instance of <em>View</em> its associated Controller and Model should be instantiated, we will call this Model-View-Controller set as <strong><em>Triad</em></strong>. Inter-layer communication  is possible only through ApplicationEvents. AppEvent has its <em>type </em>and <em>name</em>. Event type can be NAVIGATION_EVENT, DATA_REQUEST_EVENT or REFRESH_VIEW. One thing to always keep in mind is each triad/controller knows and handles only those events that it is responsible for. For example, "Login" triad knows only how to log-in user.

NAVIGATION_EVENT: Navigation event is initiated from View, from where it is passed to controller. Controller checks whether it can handle the event or not. If not, then using chain of responsibility pattern is applied and event is passed through hierarchy of its parent controllers. And when the first controller which can handle the event is found, this hierarchy is stopped.

DATA_REQUEST_EVENT: Data Request Event is one which has server communication involved. This is init. from view, and after being delegated by controller its finally handled by Model which does client' interaction. After response from server, model fires NAVIGATION or REFRESH_VIEW event to controller to show new page/ refresh data that was requested.
<ol>
	<li><strong>View: </strong>View has dedicated role for lay-outing the GUI, applying css classes to the components and fireEvents to the controllers when user interaction takes place. As stated earlier, we can divide screen into GUI objects and certain criterias to give it dedicated controller &amp; model can be complexity in the object, amount of navigation inside the panel or amount of data that needs to be transferred with server and frequency of these transfers. Each view will have acces to its child panels. For example, consider diagram below which shows components of "ExamplePage"  in which page is divided into Header, Menubar, NavigationPanel, Preview panel etc. UI object that have dedicated controller and model are outlined in Red. We will name 3 triads in this page as pageTriad, contentTriad, innerNavigationTriad and repectively we can call controllers of  them as pageController, contentController and innerNavigationController.

[caption id="attachment_14" align="aligncenter" width="459"]<img class="size-full wp-image-14" title="img" alt="&quot;ExamplePage&quot; Components" src="http://ooerabegins.files.wordpress.com/2009/05/img2.png" width="459" height="348" /> "ExamplePage" Components[/caption]</li>
	<li><strong>Controller: </strong>Controller's main responsibility is to delegate events to view/model/parent controller and synchronizing data between view and model. As discussed earlier, controller has associated parentController. For example, consider example above, in which case, parentController of "contentController" is set to "pageController", parent of "innerNavigationController" is set to "contentController". Here PageTriad can handle events fired from Menu bar only, ContentTriad can handle events fired from NavigationPanel and it can update preview panel accordingly, InnerNavigationTriad can handle updation in InnerPreviewPanel, however, if there is any event inside "InnerNavigationPanel" to update "PreviewPanel" outside InnerTriad, then chain of responsibility comes into play. InnerNavigationController can not handle this event, so it passes this event to parent controller - "AdminController" which can handle updation in "PreviewPanel". Here is the diagram to understand hierarchy of triads and how they are associated.

[caption id="attachment_15" align="aligncenter" width="443"]<img class="size-full wp-image-15" title="hmvcLayers" alt="HMVC Layers " src="http://ooerabegins.files.wordpress.com/2009/05/hmvclayers1.png" width="443" height="275" /> HMVC Layers[/caption]

When dataRequestEvent is fired from view, controller has fixed set to steps to do (1) Get data from view and set it to model and (2) Delegate event to model. As we know what we need to do, we can code this in the super-class of controller in following way.<code>
[code language="java"]public abstract class Controller{
 View view;
 Model model;
 public void handleEvent(AppEvent event){
 if(event.getType.equals(&quot;DATA_REQUEST_EVENT&quot;)){
 setModelData();
 model.handleEvent();
 }
 }
 public abstract void setModelData();
 public abstract void setViewData();
 // getters and setters of view and model
 }[/code]


</code>Here, setModelData() will be abstract method in the super class of Controller. Our all other controller will extend this Controller class. For Example, lets see what if we want to create "Login" widget's controller. Its setModelData() method would be somewhat like this.<code>
[code language="java"]public void setModelData(){
 model.setUserName(view.getUserNameTF().getText());
 model.setPassword(view.getPasswordTF().getText());
 }[/code]


</code>Similarly, we can write setViewData() method which will synch data of view with model.  After server response is received, model will fire REFRESH_VIEW event to controller and controller can call setViewData() to synch view and then call refreshView() method to actually update view in screen.</li>
	<li><strong>Model:</strong> Model is responsible to hold data that is displayed in view, communicate with server to get latest data and after server response, fire REFRESH_VIEW or NAVIGATION event on controller.</li>
</ol>
Here is the class diagram that may help to implement this pattern and identifying what interface each layer needs to provide to communicate with other layer.

[caption id="attachment_16" align="aligncenter" width="509"]<img class="size-full wp-image-16" title="EADiagram" alt="HMVC - Class Diagram" src="http://ooerabegins.files.wordpress.com/2009/05/eadiagram1.png" width="509" height="312" /> HMVC - Class Diagram[/caption]

Summarizing the pattern, complex UI objects are given dedicated controllers and model that communicate with each other through events. DataRequestEvent go from View-&gt;Controller-&gt;Model-&gt;Server-&gt;Model-&gt;Controller-&gt;refreshView() and Navigation events are handled by controller using chain of responsibility. When the first controller that can handle the event is found, chain ends.

After this initial framework is build, it becomes too easy to add new components later or debug existing component and we can also build super classes for each type of UI component for example Page, Grid or Tree. Will get into details of those in coming posts.

<strong>References:</strong>
<a href="http://www.javaworld.com/javaworld/jw-07-2000/jw-0721-hmvc.html?page=1">Javaworld HMVC Tutorial</a>
<a href="http://www.thecentric.com/wiki/index.php/HMVC_Tutorial">The Centric HMVC Tutorial</a>

Suggetions and queries are always welcome. Email me at vishal1shukla2@gmail.com.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>6</wp:post_id>
  <wp:post_date>2009-05-29 03:21:03</wp:post_date>
  <wp:post_date_gmt>2009-05-29 03:21:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hmvc-pattern1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="design-pattern"><![CDATA[Design Pattern]]></category>
  <category domain="post_tag" nicename="desktop-application"><![CDATA[Desktop Application]]></category>
  <category domain="category" nicename="gui"><![CDATA[GUI]]></category>
  <category domain="post_tag" nicename="gui-pattern"><![CDATA[GUI Pattern]]></category>
  <category domain="post_tag" nicename="gwt-design-pattern"><![CDATA[GWT Design Pattern]]></category>
  <category domain="post_tag" nicename="gwt-pattern"><![CDATA[GWT Pattern]]></category>
  <category domain="post_tag" nicename="hierarchical-model-view-controller"><![CDATA[Hierarchical Model View Controller]]></category>
  <category domain="post_tag" nicename="hmvc"><![CDATA[HMVC]]></category>
  <category domain="post_tag" nicename="swing"><![CDATA[Swing]]></category>
  <wp:postmeta>
    <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
    <wp:meta_value><![CDATA[2009-05-29 03:21:03]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_183500</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[johnf]]></wp:comment_author>
    <wp:comment_author_email>opensoftgr@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>94.67.129.155</wp:comment_author_IP>
    <wp:comment_date>2009-05-31 07:55:33</wp:comment_date>
    <wp:comment_date_gmt>2009-05-31 07:55:33</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for sharing this.

The pattern is straightforward to use when a triad (model-view-controller) can handle its events autonomously. What happens, though, when a triad needs data from another triad to complete its handling? What about broadcast events that needs to be passed to all triads (like APP_INIT event)? How do you implement these cases?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>3</wp:comment_id>
    <wp:comment_author><![CDATA[vishalshukla304]]></wp:comment_author>
    <wp:comment_author_email>vishal1shukla2@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>117.196.99.38</wp:comment_author_IP>
    <wp:comment_date>2009-05-31 17:56:43</wp:comment_date>
    <wp:comment_date_gmt>2009-05-31 17:56:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi John.. Can you please explain scenario with practical example?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>2</wp:comment_parent>
    <wp:comment_user_id>8195053</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>4</wp:comment_id>
    <wp:comment_author><![CDATA[johnf]]></wp:comment_author>
    <wp:comment_author_email>opensoftgr@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>94.70.29.101</wp:comment_author_IP>
    <wp:comment_date>2009-06-01 14:21:23</wp:comment_date>
    <wp:comment_date_gmt>2009-06-01 14:21:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Sorry, I don't have a pratical example but think of it as a View needs additional data to render but these data are not handled but is associated controller (or its parents) but from a "sibling" controller. How an event/response is passed from a controller to controller when they dont have parent/child relationship? Hope I made it a little more clear to you.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>7</wp:comment_id>
    <wp:comment_author><![CDATA[vishalshukla304]]></wp:comment_author>
    <wp:comment_author_email>vishal1shukla2@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>220.224.237.27</wp:comment_author_IP>
    <wp:comment_date>2009-06-02 08:40:58</wp:comment_date>
    <wp:comment_date_gmt>2009-06-02 08:40:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi John,

I think I was not much clear on explaining that. If you see diagram of "ExamplePage", or any other screen in any  type of web page, at the top most level, we have "Page", all other panels will be child of Page. In addition to this, every "View" has getter method of its child panel. So when a panel wants to communicate with other panel(sibling), panel will pass event to its parentController. In our case, its passed to "Page". So "Page" will have getter method of that <em>sibling<em> panel. And it can also call any method in that panel. Thats one of the reason why we have "refreshView" method in every "View".

I hope you are clear now..]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>4</wp:comment_parent>
    <wp:comment_user_id>8195053</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8</wp:comment_id>
    <wp:comment_author><![CDATA[johnf]]></wp:comment_author>
    <wp:comment_author_email>opensoftgr@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>94.67.148.100</wp:comment_author_IP>
    <wp:comment_date>2009-06-02 19:59:30</wp:comment_date>
    <wp:comment_date_gmt>2009-06-02 19:59:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Ok, got it. I was missing the idea of the "global parent" page controller. 
Thanx again.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>7</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[DatDruptLot]]></wp:comment_author>
    <wp:comment_author_email>jackguguie@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://teethwhiteningstories.blogsome.com</wp:comment_author_url>
    <wp:comment_author_IP>115.124.102.182</wp:comment_author_IP>
    <wp:comment_date>2009-06-19 00:57:30</wp:comment_date>
    <wp:comment_date_gmt>2009-06-19 00:57:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks much for post. It's very good read.
I really like to read ooerabegins.wordpress.com!

<a href="http://teethwhiteningstories.blogsome.com" rel="nofollow">teeth whitening california</a>]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>25</wp:comment_id>
    <wp:comment_author><![CDATA[Mike Richardson]]></wp:comment_author>
    <wp:comment_author_email>michael.richardson@credit-suisse.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>198.240.212.26</wp:comment_author_IP>
    <wp:comment_date>2009-07-02 13:04:08</wp:comment_date>
    <wp:comment_date_gmt>2009-07-02 13:04:08</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I have developed user interfaces in two different investment banks using HMVC. I developed the framework as a variation on the original JavaWorld article, and the frameworks were a bit more like the pattern described here.

My main change was that none of the controllers knew about each other but registered an interest in events which were stored a al Observer pattern in a central object which I called an Allocator.

This would presumaby operate like the "global parent" and could respond to data requests from any triad.

This pattern works really well; we found it kept GUI widgets decoupled from each other and from business logic, and therefore made the ui more scaleable.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>41</wp:comment_id>
    <wp:comment_author><![CDATA[nukesbuddy]]></wp:comment_author>
    <wp:comment_author_email>pradeepnookala@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>90.196.100.38</wp:comment_author_IP>
    <wp:comment_date>2012-02-26 15:09:22</wp:comment_date>
    <wp:comment_date_gmt>2012-02-26 15:09:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi, Thanks for the article, just what I was looking for. Is it possible to send me the code for this article ?]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1330268962.8736";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1378625881</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1378625881.5969340801239013671875;s:7:"message";s:54:"vishalshukla304 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"vishalshukla304";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>32</wp:comment_id>
    <wp:comment_author><![CDATA[pavan]]></wp:comment_author>
    <wp:comment_author_email>srinivasan_pavan@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>72.88.130.107</wp:comment_author_IP>
    <wp:comment_date>2009-09-19 05:12:24</wp:comment_date>
    <wp:comment_date_gmt>2009-09-19 05:12:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I think u are talking about an event bus &amp; not hmvc.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1378625888</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1378625888.17236995697021484375;s:7:"message";s:54:"vishalshukla304 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"vishalshukla304";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>33</wp:comment_id>
    <wp:comment_author><![CDATA[Raúl Lorenzo]]></wp:comment_author>
    <wp:comment_author_email>rlorenb@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>213.60.131.23</wp:comment_author_IP>
    <wp:comment_date>2009-11-05 17:02:21</wp:comment_date>
    <wp:comment_date_gmt>2009-11-05 17:02:21</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hello vishalshukla304,

Where can I find a piece of code complete about this for testing handleEvent from View?

Thanks for your post]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>34</wp:comment_id>
    <wp:comment_author><![CDATA[vishalshukla304]]></wp:comment_author>
    <wp:comment_author_email>vishal1shukla2@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>59.90.218.3</wp:comment_author_IP>
    <wp:comment_date>2009-12-11 10:55:34</wp:comment_date>
    <wp:comment_date_gmt>2009-12-11 10:55:34</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi Raul,

Sorry for late reply. I don't think there is any standard implementation of this pattern is available. If you wish, I can send you sample code for View, Model, Controller classes.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>33</wp:comment_parent>
    <wp:comment_user_id>8195053</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>35</wp:comment_id>
    <wp:comment_author><![CDATA[suresh]]></wp:comment_author>
    <wp:comment_author_email>sureshhai@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>130.14.254.25</wp:comment_author_IP>
    <wp:comment_date>2009-12-22 20:30:22</wp:comment_date>
    <wp:comment_date_gmt>2009-12-22 20:30:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Hi vishalshukla304
Its nice article. Can you please send the sample code?

Thanks]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>GUI Components</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/img/</link>
  <pubDate>Fri, 29 May 2009 01:23:35 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/img.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>9</wp:post_id>
  <wp:post_date>2009-05-29 01:23:35</wp:post_date>
  <wp:post_date_gmt>2009-05-29 01:23:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>img</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/img.png</wp:attachment_url>
</item>
<item>
  <title>GUI Components</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/img-2/</link>
  <pubDate>Fri, 29 May 2009 01:26:06 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/img1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>10</wp:post_id>
  <wp:post_date>2009-05-29 01:26:06</wp:post_date>
  <wp:post_date_gmt>2009-05-29 01:26:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>img-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/img1.png</wp:attachment_url>
</item>
<item>
  <title>img</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/img-3/</link>
  <pubDate>Fri, 29 May 2009 02:42:05 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/img2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA["ExamplePage" Components]]></excerpt:encoded>
  <wp:post_id>14</wp:post_id>
  <wp:post_date>2009-05-29 02:42:05</wp:post_date>
  <wp:post_date_gmt>2009-05-29 02:42:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>img-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/img2.png</wp:attachment_url>
</item>
<item>
  <title>hmvcLayers</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/hmvclayers-2/</link>
  <pubDate>Fri, 29 May 2009 03:04:34 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/hmvclayers1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[HMVC Layers ]]></excerpt:encoded>
  <wp:post_id>15</wp:post_id>
  <wp:post_date>2009-05-29 03:04:34</wp:post_date>
  <wp:post_date_gmt>2009-05-29 03:04:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hmvclayers-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/hmvclayers1.png</wp:attachment_url>
</item>
<item>
  <title>EADiagram</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/eadiagram-2/</link>
  <pubDate>Fri, 29 May 2009 03:08:29 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/eadiagram1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[HMVC - Class Diagram]]></excerpt:encoded>
  <wp:post_id>16</wp:post_id>
  <wp:post_date>2009-05-29 03:08:29</wp:post_date>
  <wp:post_date_gmt>2009-05-29 03:08:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>eadiagram-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/eadiagram1.png</wp:attachment_url>
</item>
<item>
  <title>hmvcLayers</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/hmvclayers/</link>
  <pubDate>Fri, 29 May 2009 01:59:10 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/hmvclayers.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[HMVC Layer]]></excerpt:encoded>
  <wp:post_id>11</wp:post_id>
  <wp:post_date>2009-05-29 01:59:10</wp:post_date>
  <wp:post_date_gmt>2009-05-29 01:59:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hmvclayers</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/hmvclayers.png</wp:attachment_url>
</item>
<item>
  <title>EADiagram</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/eadiagram/</link>
  <pubDate>Fri, 29 May 2009 02:14:42 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/eadiagram.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[HMVC pattern - Class Diagram]]></excerpt:encoded>
  <wp:post_id>12</wp:post_id>
  <wp:post_date>2009-05-29 02:14:42</wp:post_date>
  <wp:post_date_gmt>2009-05-29 02:14:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>eadiagram</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/eadiagram.png</wp:attachment_url>
</item>
<item>
  <title>Inauguration Of Objectville Restaurant</title>
  <link>http://ooerabegins.wordpress.com/?p=26</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.wordpress.com/?p=26</guid>
  <description/>
  <content:encoded><![CDATA[Hello again,

After thinking for quite a while for what to post in the blog, I thought its not bad to go in Kathy's way. :) If you didn't ever try then just have on eye on any book of Kathy Sierra or you can say synonym of Kathy is "Head First" books. Just google out any of the "Head First" book and you will surely get "never read before" books. 

So I finally decided that I will open one restaurant <em>Objectville </em>soon. But to make <em>Objectville </em> rock in the town, we need system with strong architecture. But we dont even want to increase complexity of the system unnecessarily by just piling up different patterns without thinking whether its needed. So I would like to start off will very simple, 'anti-object-oriented' kind of design, will check out the issues that may arise and then recover. And don't worry.. There are few days to go in inauguration of Objectville restaurant so possible redesign won't cost too much.. 

]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>26</wp:post_id>
  <wp:post_date>2009-05-30 00:33:15</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>object-ville</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
</item>
<item>
  <title>New Restaurant In Town</title>
  <link>http://ooerabegins.wordpress.com/2009/05/30/new-restaurant-objectville/</link>
  <pubDate>Sat, 30 May 2009 01:50:04 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.wordpress.com/?p=27</guid>
  <description/>
  <content:encoded><![CDATA[Hi again,

After thinking for quite a while for what to post in the blog, I thought its not bad to go in Kathy's way. :) If you didn't ever try then just have on eye on any book of Kathy Sierra or you can say synonym of Kathy is "Head First" books. Just google out any of the "Head First" book and you will surely get "never read before" books. 

So I finally decided that I will open one restaurant <em>Objectville </em>soon. But to make <em>Objectville </em> rock in the town, we will be serving very few fastfood only in the initial stage, however, we want to go long way so we need system with strong architecture. But we don't even want to increase complexity of the system unnecessarily by just piling up different patterns without thinking whether its needed. So I would like to start off will very simple, 'anti-object-oriented' kind of design, will check out the issues that arises and then recover. And don't worry.. There are still few days to go in inauguration of Objectville restaurant so possible redesign won't cost too much.  

Here is the menu that we are going to offer initially. 
1	Double -cheese Pizza – will have bunch of delicious liquid cheese on top of thick crust
2	Italian Pizza – will have Mozzarella cheese along with tomato sauce with sweet basils and oregano on  top of crusty Italian bread
3	Fresh-veggie Pizza – brimming over with capsicum and crunchy onions.
4	Vegetable Sandwich – prepared and served fresh with crispy capsicum, fresh tomato and our 
	spicy green chutney in bread slices.
5	Cheese Sandwich – grated cheese stuffed inside breads with aroma of garlic in it
6	“Aalu-matar” Sandwich – typical Indian style piping hot sandwich stuffed with potatoes and peas cooked.

We will surely have classes of these items which we will see in the next post and will also think of what else we can offer initially to make Objectville rock. So next time, we will design “anti-object-oriented” classes for our restaurant. Remember, descriptions of these item will come into picture later. Discussion point of view,  will try to be programming language independent as much as possible except the code snippets. 

I appreciate your time to leave feedback and help me learn and improve Objectville.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2009-05-30 01:50:04</wp:post_date>
  <wp:post_date_gmt>2009-05-30 01:50:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>new-restaurant-objectville</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="objectville"><![CDATA[Objectville]]></category>
  <category domain="post_tag" nicename="objectville"><![CDATA[Objectville]]></category>
  <wp:postmeta>
    <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
    <wp:meta_value><![CDATA[2009-05-30 01:50:04]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>11</wp:comment_id>
    <wp:comment_author><![CDATA[Digicorp &raquo; Blog Archive &raquo; Objectville - New Restaurant In Town]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://dev.digi-corp.com/2009/05/objectville-new-restaurant-in-town/</wp:comment_author_url>
    <wp:comment_author_IP>64.13.192.18</wp:comment_author_IP>
    <wp:comment_date>2009-06-05 11:56:19</wp:comment_date>
    <wp:comment_date_gmt>2009-06-05 11:56:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Read More &gt;&gt;    Category: Code, design &nbsp;|&nbsp;&nbsp;Comment (RSS) &nbsp;|&nbsp;&nbsp;Trackback [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[Digicorp &raquo; Blog Archive &raquo; First Trial To Objectize Objectville]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://dev.digi-corp.com/2009/06/first-trial-to-objectize-objectville/</wp:comment_author_url>
    <wp:comment_author_IP>64.13.192.20</wp:comment_author_IP>
    <wp:comment_date>2009-06-05 11:58:10</wp:comment_date>
    <wp:comment_date_gmt>2009-06-05 11:58:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Oops, it may seem strange if you are new here in Objectville. New readers, just have a look at New Restaurant In Town and continue here. Lets prepare class for each item Classes we need to create:  DoubleCheesePizza [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>38</wp:comment_id>
    <wp:comment_author><![CDATA[Plastic Pond]]></wp:comment_author>
    <wp:comment_author_email>Thomen@yahoo.com</wp:comment_author_email>
    <wp:comment_author_url>http:///www.plasticpond.net</wp:comment_author_url>
    <wp:comment_author_IP>121.96.214.219</wp:comment_author_IP>
    <wp:comment_date>2011-01-25 20:49:38</wp:comment_date>
    <wp:comment_date_gmt>2011-01-25 20:49:38</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[.-; I am really thankful to this topic because it really gives great information :.,]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1296029275</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";s:15:"1296029275.7973";s:7:"message";s:54:"vishalshukla304 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"vishalshukla304";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>EADiagram</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/eadiagram-3/</link>
  <pubDate>Sun, 31 May 2009 06:52:29 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/eadiagram2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[HMVC - Class Diagram]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2009-05-31 06:52:29</wp:post_date>
  <wp:post_date_gmt>2009-05-31 06:52:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>eadiagram-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/eadiagram2.png</wp:attachment_url>
</item>
<item>
  <title>EADiagram</title>
  <link>http://ooerabegins.wordpress.com/2009/05/29/hmvc-pattern1/eadiagram-4/</link>
  <pubDate>Sun, 31 May 2009 06:53:38 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/eadiagram3.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[HMVC - Class Diagram]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2009-05-31 06:53:38</wp:post_date>
  <wp:post_date_gmt>2009-05-31 06:53:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>eadiagram-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>6</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/eadiagram3.png</wp:attachment_url>
</item>
<item>
  <title>First Trial To Objectize Objectville</title>
  <link>http://ooerabegins.wordpress.com/2009/05/31/first_trial_to_objectize/</link>
  <pubDate>Sun, 31 May 2009 19:22:58 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.wordpress.com/?p=34</guid>
  <description/>
  <content:encoded><![CDATA[We have our small menu ready now, we know what all we are going to serve in <em>Objectville</em>. Oops, it may seem strange if you are new here in <em>Objectville</em>. New readers, just have a look at New Restaurant In Town and continue here. Lets prepare class for each item
Classes  we need to create:
<ul> DoubleCheesePizza
ItalianPizza
FreshVeggiePizza
Vegetable Sandwich
Cheese Sandwich
Aalu-matar Sandwich</ul>
We also need to take care of our ordering system in hotel so we need one attribute called “cost” in all of the above classes. We will have descriptions of each item. Keeping in mind likings of customers, we need to have thin crust pizzas, as well as thick crust pizza. So lets have a look at these classes.

<code>public class DoubleCheesePizza {
private List ingredients;
private String description;
private String crustType; // Thin crust or thick crust
private String size; // Small, Medium or Large</code>

public doublecost() {
// Calculate Cost For DoubleCheesePizza
}
// Other getters and setters

}

Here we have ingredients for printing purpose and we have cost() method in each class, which will calculate cost of item based on its attributes e.g. crustType, size etc.

Similarly, we will have <em>FreshVeggiePizza </em>and <em>ItalianPizza</em>. But being in Gujarat, we need to remember Jains also  so we will include one additional boolean attribute "withOnion", so that we can have it true or false.  We can also have provision to have grated cheese or liquid cheese. We will need a boolean for "liquidCheese".

CheeseSandwich class can be like this:

<code>public class CheeseSandwich {
private String name;
private String description;
private List ingredients;
private boolean withExtraCheese;</code>

public double cost() {
// Calculate Cost For DoubleCheesePizza
}
// Other getters and setters
}
Remember, we need to add many more items in our menu as Objectville gets popular. So just imagine a scenario when Objectville will be among the most popular restaurants. Customers will definitely expect flexibilities like have some extra cheese in pizza, have some customized toppings like jalapano and olives in freshVeggie. Exclude capsicum from Italian pizza, have “grilled” vegetable sandwich, have some cheese on Aaloo-matar sandwich. And cost is going to vary according to toppings used. If we go with this same design, we will end up with something like this.

[caption id="attachment_35" align="aligncenter" width="509" caption="Class Explosion"]<img class="size-full wp-image-35" title="ClassExplosion" src="http://ooerabegins.files.wordpress.com/2009/05/classexplosion.png" alt="Class Explosion" width="509" height="306" />[/caption]

So one problem we see clearly here is explosion of classes. We need to create a class for every customization in the item. May it be some single addition in topping or some different method in cooking. The other problem here is, our cost() method becomes tightly coupled. What will we do if price of cheese goes up.

This design really seems like stupid, when we are well equipped with power of inheritance, polymorphism &amp; aggregation. This is kind of class design that we really don’t want. We will try to get rid of these issues next time.

<a href="../2009/06/02/etymology-of-decorator-pattern/" target="_blank">Next&gt;&gt;</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2009-05-31 19:22:58</wp:post_date>
  <wp:post_date_gmt>2009-05-31 19:22:58</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>first_trial_to_objectize</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="objectville"><![CDATA[Objectville]]></category>
  <wp:postmeta>
    <wp:meta_key>_wp_old_slug</wp:meta_key>
    <wp:meta_value><![CDATA[first_trial_to_objectiz]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
    <wp:meta_value><![CDATA[2009-05-31 19:22:58]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Digicorp &raquo; Blog Archive &raquo; First Trial To Objectize Objectville]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://dev.digi-corp.com/2009/06/first-trial-to-objectize-objectville/</wp:comment_author_url>
    <wp:comment_author_IP>64.13.192.20</wp:comment_author_IP>
    <wp:comment_date>2009-06-05 11:58:14</wp:comment_date>
    <wp:comment_date_gmt>2009-06-05 11:58:14</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Read More &gt;&gt;    Tags: Object Oriented, Objectville Category: Code, Uncategorized, design &nbsp;|&nbsp;&nbsp;Comment (RSS) &nbsp;|&nbsp;&nbsp;Trackback [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>ClassExplosion</title>
  <link>http://ooerabegins.wordpress.com/2009/05/31/first_trial_to_objectize/classexplosion/</link>
  <pubDate>Sun, 31 May 2009 19:06:55 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/05/classexplosion.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Class Explosion]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2009-05-31 19:06:55</wp:post_date>
  <wp:post_date_gmt>2009-05-31 19:06:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>classexplosion</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>34</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/05/classexplosion.png</wp:attachment_url>
</item>
<item>
  <title>Decorator Pattern Explained</title>
  <link>http://ooerabegins.wordpress.com/2009/06/11/decorator_pattern_explained/</link>
  <pubDate>Thu, 11 Jun 2009 04:26:42 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.wordpress.com/?p=51</guid>
  <description/>
  <content:encoded><![CDATA[In last post, we identified what issues can arise if we keep going with the design shown in <a href="http://ooerabegins.wordpress.com/2009/06/02/etymology-of-decorator-pattern/">Etymology Of Decorator Pattern</a>. Lets take a quick look at what fundamental design problems exists in this design.

[caption id="attachment_53" align="aligncenter" width="192"]<img class="size-full wp-image-53" title="Hierarchy_food2" alt="Exsisting Class Hierarchy" src="http://ooerabegins.files.wordpress.com/2009/06/hierarchy_food2.png" width="192" height="350" /> Exsisting Class Hierarchy[/caption]

Here, we are hard-coding toppings of Pizza. Which are, in fact, individual Object in the real world. So in a way, they are <strong>Add-on objects</strong> that can be used to decorate our pizza. If we want to add new item as toppings, we need to modify the class. Ideally, we should be able to add any new topping “without modifying the class”, hence we come to know <strong>Open-closed principal</strong>.

<em>“Classes should be closed for modification and open for enhancement.”</em>

Now question is how to achieve this. Let’s note down what approach we need to follow to get maximum flexibility in design (maximum in terms of toppings and calculating its cost) in creating one <strong>FreshVeggiePizza with Paneer and Olives</strong>.
1. Take plain Pizza object.
2. Decorate it with Paneer.
3. Decorate it with Olives.
4. Call cost() method, which will be delegated to “Add-on” or “Decorator” objects also to add up their cost.

Here is the diagram that will clarify exactly how the cost will be calculated for this pizza.

[caption id="attachment_55" align="aligncenter" width="450"]<img class="size-full wp-image-55" title="Cost" alt="Cost Of FreshVeggiePizza With Paneer &amp; Olives" src="http://ooerabegins.files.wordpress.com/2009/06/cost1.png" width="450" height="300" /> Cost Of FreshVeggiePizza With Paneer &amp; Olives[/caption]

There is one important point in this diagram if you noticed. There has to be cost() method in each “Decorator” object as well as “FreshVeggiePizza”. So we will create one super class “Decorator” for each topping item. Food class will have cost() and getDescription() methods. In addition to that, we should be able to print description of the food according to what toppings are added, rather than tucking description into Pizza class.

[caption id="attachment_56" align="aligncenter" width="521"]<img class="size-full wp-image-56" title="Decorator Pattern" alt="Class Design With Decorator Pattern" src="http://ooerabegins.files.wordpress.com/2009/06/decoratorpatter.png" width="521" height="415" /> Class Design With Decorator Pattern[/caption]

Here is the example to realize this diagram.
<code>
public abstract class Food {
String description;
public String getDescription(){
return description;
}
public abstract void cost();
}
public abstract class Decorator extends Food {
public abstract String getDescription();
public abstract void cost();
}
public class FreshVeggiePizza extends Food {
public FreshVeggiePizza(){
description = “Fresh Veggie Pizza”;
}</code>

public double cost(){
return 100;
}}
public class Paneer extends Decorator {
Food food;
public Paneer(Food food){
this.food = food;
}

public String getDescription(){
return food.getDescription + “, with Paneer”;
}

public double cost(){
return food.cost() + 15;
}
}

Let’s take a look at what happens in this code. Here our “Non-decorator” food will return description set in the constructor. So we have default implementation of getDescription() in Food class. We want to enforce each Decorator to implement getDescription() method in such a way so that it also reflects object it is decorating. So we have getDescription() method abstract in Decorator class. Now, Decorator classes like Paneer also needs to know which food it is decorating, so we need to pass the decorated food in the constructor of Paneer. In this way, we can create our other pizza and sandwich classes and their decorators.

<strong>Recipe Of FreshVeggiePizza with Paneer and Olive :</strong>

1.  Create classic FreshVeggiePizza.
Food pizza = new FreshVeggiePizza();
2. Put a layer of Paneer over it.
pizza= new Paneer(pizza );
3. Spread some olives over pizza.
pizza = new Olive(pizza);

Your FreshVeggiePizza with paneer and olives is ready. Now if you print price of the pizza, it will calculate cost for FreshVeggiePizza + cost of Paneer + cost of Olive. This is the fair level of dynamism that we can expect at this stage of Objectville.

<strong>Open-closed Principal Achieved:</strong>

We don’t need to change our Pizza class at all to add toppings on it that may change cost of the pizza. We don’t care if cost of paneer or olive booms, because we can parameterize those attributes and it is “decorated” over pizzas rather than tightly coupling it into pizza.

<strong>Decorators In Practice :</strong>

To take a look at real life decorators, have an eye over java.io classes. Replace Food with <em>InputStream</em>, Decorator with <em>FilterInputStream</em>, FreshVeggiePizza with <em>FileInputStream/ByteArrayInputStream/StringBufferInputStream</em> and Paneer with <em>PushbackInputStream/BufferedInputStream/DataInputStream</em>.

<strong>Summary:</strong>

Identify properties and methods common to decorators and client components (in our case, client is Pizza). Create super class for these common methods. Create Decorator super-class and identify methods which need to be implemented by each decorator. Pass reference of client in each decorator to allow decorator to add its own properties. Hence, job of decorator is to extend behavior of client and that too without modifying existing code.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>51</wp:post_id>
  <wp:post_date>2009-06-11 04:26:42</wp:post_date>
  <wp:post_date_gmt>2009-06-11 04:26:42</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>decorator_pattern_explained</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="decorator-pattern"><![CDATA[Decorator Pattern]]></category>
  <category domain="post_tag" nicename="design-pattern"><![CDATA[Design Pattern]]></category>
  <category domain="category" nicename="objectville"><![CDATA[Objectville]]></category>
  <category domain="post_tag" nicename="objectville"><![CDATA[Objectville]]></category>
  <wp:postmeta>
    <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
    <wp:meta_value><![CDATA[2009-06-11 04:26:42]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_skip_183500</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>19</wp:comment_id>
    <wp:comment_author><![CDATA[Digicorp &raquo; Blog Archive &raquo; Decorator Pattern Explained]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://dev.digi-corp.com/2009/06/decorator-pattern-explained/</wp:comment_author_url>
    <wp:comment_author_IP>64.13.192.28</wp:comment_author_IP>
    <wp:comment_date>2009-06-15 07:58:31</wp:comment_date>
    <wp:comment_date_gmt>2009-06-15 07:58:31</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Read More &gt;&gt;    Tags: decorator pattern Category: Code &nbsp;|&nbsp;&nbsp;Comment (RSS) &nbsp;|&nbsp;&nbsp;Trackback [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>48</wp:comment_id>
    <wp:comment_author><![CDATA[xadm]]></wp:comment_author>
    <wp:comment_author_email>xadm@interia.pl</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>212.14.49.226</wp:comment_author_IP>
    <wp:comment_date>2013-09-01 16:18:16</wp:comment_date>
    <wp:comment_date_gmt>2013-09-01 16:18:16</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[hi, 

Food pizza = new FreshVeggiePizza();
pizza= new Paneer(food);   // SHOULDN'T BE pizza as parameter?
pizza = new Olive(pizza);]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1378052297.607633113861083984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1378626081</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1378626081.7158238887786865234375;s:7:"message";s:54:"vishalshukla304 changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:15:"vishalshukla304";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>49</wp:comment_id>
    <wp:comment_author><![CDATA[vishalshukla304]]></wp:comment_author>
    <wp:comment_author_email>vishal1shukla2@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>59.90.218.236</wp:comment_author_IP>
    <wp:comment_date>2013-09-08 07:48:50</wp:comment_date>
    <wp:comment_date_gmt>2013-09-08 07:48:50</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for pointing it out typo xadm. updated it.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>48</wp:comment_parent>
    <wp:comment_user_id>8195053</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1378626530</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1378626530.192173004150390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:15:"vishalshukla304";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>hierarchy_food</title>
  <link>http://ooerabegins.wordpress.com/2009/06/11/decorator_pattern_explained/hierarchy_food-2/</link>
  <pubDate>Thu, 11 Jun 2009 04:06:43 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/06/hierarchy_food1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2009-06-11 04:06:43</wp:post_date>
  <wp:post_date_gmt>2009-06-11 04:06:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hierarchy_food-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>51</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/06/hierarchy_food1.jpg</wp:attachment_url>
</item>
<item>
  <title>Hierarchy_food2</title>
  <link>http://ooerabegins.wordpress.com/2009/06/11/decorator_pattern_explained/hierarchy_food2/</link>
  <pubDate>Thu, 11 Jun 2009 04:08:39 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/06/hierarchy_food2.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Exsisting Class Hierarchy]]></excerpt:encoded>
  <wp:post_id>53</wp:post_id>
  <wp:post_date>2009-06-11 04:08:39</wp:post_date>
  <wp:post_date_gmt>2009-06-11 04:08:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hierarchy_food2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>51</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/06/hierarchy_food2.png</wp:attachment_url>
</item>
<item>
  <title>Cost</title>
  <link>http://ooerabegins.wordpress.com/2009/06/11/decorator_pattern_explained/cost/</link>
  <pubDate>Thu, 11 Jun 2009 04:13:30 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/06/cost.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Cost Of FreshVeggiePizza With Paneer &amp; Olives]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2009-06-11 04:13:30</wp:post_date>
  <wp:post_date_gmt>2009-06-11 04:13:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cost</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>51</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/06/cost.png</wp:attachment_url>
</item>
<item>
  <title>Etymology Of Decorator Pattern</title>
  <link>http://ooerabegins.wordpress.com/2009/06/02/etymology-of-decorator-pattern/</link>
  <pubDate>Tue, 02 Jun 2009 19:20:13 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.wordpress.com/?p=39</guid>
  <description/>
  <content:encoded><![CDATA[Today our purpose is to know why <strong>decorator pattern</strong>. In last post, we found that there is class explosion if we go with the first trial. Now what we can do to improve this design is, we can have one abstract super-class <strong>Food </strong>which will be specialized by <strong>Pizza </strong>and <strong>Sandwich </strong>classes.  Food class will be <em>abstract</em>:

<code>
public abstract class Food {
private List ingredients;
private String description;
public abstract double cost();
}
</code>

<strong>Pizza </strong>class will extend this <strong>Food </strong>class and add pizza specific property in this class. For example, crustType, extraCheese, olives, jalapano, paneer etc. If the pizza subclass needs to add jalapano in the toppings, value of jalapano will be true.  Similarly, we can have <strong>Sandwich</strong> class, extending Foot class and adding some Sandwich specific properties to it. Then we can have subclasses like ItalianPizza, DoubleCheesePizza, FreshVeggiePizza subclasses that extend Pizza and will have implementation of cost() method(by overriding). By this approach, we no more need to create separate classes for ItalianPizza with olives, with Paneer etc. Here is the class diagram for this.

[caption id="attachment_40" align="aligncenter" width="663" caption="Revised Class-diagram"]<img class="size-full wp-image-40" title="hierarchy_food" src="http://ooerabegins.files.wordpress.com/2009/06/hierarchy_food.jpg" alt="Revised Class-diagram" width="663" height="333" />[/caption]

Let’s check out how it works. When we create instance of, say ItalianPizza, then we can set jalapano, olives true or false according to what we want in the toppings of the pizza. Using the same properties we can calculate cost of the Pizza.

It’s now time to check out what issues can arise in this approach.
1.	What should we do if price of cheese goes up? Here, we are hard-coding price of cheese in cost() method.
2.	What if some new item is introduced for toppings? For example, corn.
3.	What if double cheese is required.

Oh god… save me now… :) Its not going any where near how we want it to be. Next time, we will eliminate these all the issue by introducing one well-known <em>decorator pattern</em>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>39</wp:post_id>
  <wp:post_date>2009-06-02 19:20:13</wp:post_date>
  <wp:post_date_gmt>2009-06-02 19:20:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>etymology-of-decorator-pattern</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="decorator-pattern"><![CDATA[Decorator Pattern]]></category>
  <category domain="post_tag" nicename="design-pattern"><![CDATA[Design Pattern]]></category>
  <category domain="category" nicename="objectville"><![CDATA[Objectville]]></category>
  <wp:postmeta>
    <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
    <wp:meta_value><![CDATA[2009-06-02 19:20:13]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Robert Cano]]></wp:comment_author>
    <wp:comment_author_email>robbo.cano@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>138.217.73.81</wp:comment_author_IP>
    <wp:comment_date>2009-06-03 04:42:22</wp:comment_date>
    <wp:comment_date_gmt>2009-06-03 04:42:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Very interesting post!
I look forward to more!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[vishalshukla304]]></wp:comment_author>
    <wp:comment_author_email>vishal1shukla2@gmail.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>220.224.237.27</wp:comment_author_IP>
    <wp:comment_date>2009-06-03 08:07:10</wp:comment_date>
    <wp:comment_date_gmt>2009-06-03 08:07:10</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thanks for appreciation...]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>9</wp:comment_parent>
    <wp:comment_user_id>8195053</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>14</wp:comment_id>
    <wp:comment_author><![CDATA[Digicorp &raquo; Blog Archive &raquo; Etymology Of Decorator Pattern]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://dev.digi-corp.com/2009/06/etymology-of-decorator-pattern/</wp:comment_author_url>
    <wp:comment_author_IP>64.13.192.20</wp:comment_author_IP>
    <wp:comment_date>2009-06-05 11:58:58</wp:comment_date>
    <wp:comment_date_gmt>2009-06-05 11:58:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Read More &gt;&gt;    Tags: decorator pattern, OOPs Category: Code &nbsp;|&nbsp;&nbsp;Comment (RSS) &nbsp;|&nbsp;&nbsp;Trackback [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>15</wp:comment_id>
    <wp:comment_author><![CDATA[Decorator Pattern Explained &laquo; Object Oriented Era Begins]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://ooerabegins.wordpress.com/2009/06/11/decorator_pattern_explained/</wp:comment_author_url>
    <wp:comment_author_IP>72.233.96.139</wp:comment_author_IP>
    <wp:comment_date>2009-06-11 04:27:02</wp:comment_date>
    <wp:comment_date_gmt>2009-06-11 04:27:02</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] Etymology Of Decorator&nbsp;Pattern  [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>18</wp:comment_id>
    <wp:comment_author><![CDATA[Digicorp &raquo; Blog Archive &raquo; Decorator Pattern Explained]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>http://dev.digi-corp.com/2009/06/decorator-pattern-explained/</wp:comment_author_url>
    <wp:comment_author_IP>64.13.192.28</wp:comment_author_IP>
    <wp:comment_date>2009-06-15 07:58:28</wp:comment_date>
    <wp:comment_date_gmt>2009-06-15 07:58:28</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[...] last post, we identified what issues can arise if we keep going with the design shown in Etymology Of Decorator Pattern. Lets take a quick look at what fundamental design problems exists in the design that we have [...]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
  </wp:comment>
</item>
<item>
  <title>hierarchy_food</title>
  <link>http://ooerabegins.wordpress.com/2009/06/02/etymology-of-decorator-pattern/hierarchy_food/</link>
  <pubDate>Tue, 02 Jun 2009 19:15:06 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/06/hierarchy_food.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Revised Class-diagram]]></excerpt:encoded>
  <wp:post_id>40</wp:post_id>
  <wp:post_date>2009-06-02 19:15:06</wp:post_date>
  <wp:post_date_gmt>2009-06-02 19:15:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>hierarchy_food</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>39</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/06/hierarchy_food.jpg</wp:attachment_url>
</item>
<item>
  <title>Cost</title>
  <link>http://ooerabegins.wordpress.com/2009/06/11/decorator_pattern_explained/cost-2/</link>
  <pubDate>Thu, 11 Jun 2009 04:15:33 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/06/cost1.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Cost Of FreshVeggiePizza With Paneer &amp; Olives]]></excerpt:encoded>
  <wp:post_id>55</wp:post_id>
  <wp:post_date>2009-06-11 04:15:33</wp:post_date>
  <wp:post_date_gmt>2009-06-11 04:15:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>cost-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>51</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/06/cost1.png</wp:attachment_url>
</item>
<item>
  <title>Decorator Pattern</title>
  <link>http://ooerabegins.wordpress.com/2009/06/11/decorator_pattern_explained/decoratorpatter/</link>
  <pubDate>Thu, 11 Jun 2009 04:19:25 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.files.wordpress.com/2009/06/decoratorpatter.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[Class Design With Decorator Pattern]]></excerpt:encoded>
  <wp:post_id>56</wp:post_id>
  <wp:post_date>2009-06-11 04:19:25</wp:post_date>
  <wp:post_date_gmt>2009-06-11 04:19:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>decoratorpatter</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>51</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>http://ooerabegins.files.wordpress.com/2009/06/decoratorpatter.png</wp:attachment_url>
</item>
<item>
  <title>Easy Data Access In Pages Of GWT/Swing Application</title>
  <link>http://ooerabegins.wordpress.com/2009/06/30/easy-data-access-in-pages-of-gwtswing-application/</link>
  <pubDate>Tue, 30 Jun 2009 04:15:40 +0000</pubDate>
  <dc:creator>vishalshukla304</dc:creator>
  <guid isPermaLink="false">http://ooerabegins.wordpress.com/?p=58</guid>
  <description/>
  <content:encoded><![CDATA[When developing desktop based or similar applications, it becomes headache to synchronize data between different pages. Say when <em>Delete</em> is clicked in context menu of some node of tree, Grid and some other panels need to be notified. Here is one simple way for accessing data of other panels. We have singleton <strong>session</strong> object (only one object at runtime) at each client’s runtime. So when we have some data that need to be used in other pages, we can put those objects in the session map and access it from the other class. Here is how we can create class that gives singleton instance of session map.

<code>
import java.util.HashMap;
public class SessionFactory {

private static HashMap session;
private SessionFactory(){
}

public static HashMap getSessionInstance(){
if(session==null){
session = new HashMap();
}

return session;
}

}

</code>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>58</wp:post_id>
  <wp:post_date>2009-06-30 04:15:40</wp:post_date>
  <wp:post_date_gmt>2009-06-30 04:15:40</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>easy-data-access-in-pages-of-gwtswing-application</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="desktop-application"><![CDATA[Desktop Application]]></category>
  <category domain="post_tag" nicename="gui-pattern"><![CDATA[GUI Pattern]]></category>
  <category domain="post_tag" nicename="gwt-design-pattern"><![CDATA[GWT Design Pattern]]></category>
  <category domain="post_tag" nicename="gwt-pattern"><![CDATA[GWT Pattern]]></category>
  <category domain="post_tag" nicename="hmvc"><![CDATA[HMVC]]></category>
  <category domain="post_tag" nicename="swing"><![CDATA[Swing]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
    <wp:meta_value><![CDATA[2009-06-30 04:15:40]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
